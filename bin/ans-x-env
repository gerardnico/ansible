#!/bin/bash
# It's a script but it's called as source by the other script

# The base url for our env doc
BASE_REPO="https://github.com"
BASE_PATH="/gerardnico/ansible-x/blob/main"
SCRIPT_PATH=$(realpath "$0")

function printEnv(){
  ENV_NAME=$1
  ENV_LABEL=$2
  ENV_LABEL2=$3
  ENV_URL_ARG=$4
  ENV_VALUE=${5}

  # starts with http ?
  if [[ $ENV_URL_ARG == http* ]]; then
    ENV_URL="$ENV_URL_ARG"
  else
    if [ "$IS_SYNOPSIS" == "1" ]; then
      # started from the project directory
      # we use the relative path directly
      ENV_URL="$ENV_URL_ARG"
    else
      # for the terminal/script
      # we let the browser handle the `..`
      ENV_URL="$BASE_REPO/$BASE_PATH/docs/bin-generated/${ENV_URL_ARG}"
    fi
  fi

  if [ "$IS_SYNOPSIS" == "1" ]; then

    echo "### $ENV_NAME"
    echo "[$ENV_LABEL]($ENV_URL)"
    [ "$ENV_LABEL2" != "" ] && echo "$ENV_LABEL2"
    echo '```bash'
    echo "export $ENV_NAME=$ENV_VALUE"
    echo '```'

  else

    echo "# $ENV_LABEL"
    [ "$ENV_LABEL2" != "" ] && echo "# $ENV_LABEL2"
    echo "# $ENV_URL"
    echo "$ENV_NAME='$ENV_VALUE'"

  fi

  echo ""
}

# ans-x-env is called for all script, we need to be sure that it's only for
# the script itself that is called
# Synopsis
IS_SYNOPSIS=0
if [ "${1:-}" == "synopsis" ] && [ "$(basename "$0")" == "ans-x-env" ]; then
  IS_SYNOPSIS=1
fi


# Don't load `$HOME/.bashenv.d/ans-x.sh`
# If we want to get another local environment
# We don't want to load the default env
# For instance, if ANS_X_PROJECT_DIR is set and that we have other
# ansible project, we may want to override this env.

# Flag parsing
# ANS_X_PASS_ENABLED Default
ANS_X_PASS_ENABLED="${ANS_X_PASS_ENABLED:-"1"}"
#if [ "$ANS_X_PASS_ENABLED" == "" ]; then
#  ANS_X_PASS_ENABLED="1"
#  if [[ "$(basename "$0")" =~ "molecule"|"ansible-galaxy"|"ansible-conf" ]] ; then
#    ANS_X_PASS_ENABLED="0"
#  fi
#fi
while [[ $# -gt 0 ]]
do
   case "$1" in
    "--xp"|"--xpass"|"--ans-x-pass")
      if [ "$ANS_X_PASS_ENABLED" = "1" ]; then
        ANS_X_PASS_ENABLED="0"
      else
        ANS_X_PASS_ENABLED="1"
      fi
      ;;
    "--ans-x-with-pass")
      ANS_X_PASS_ENABLED="1"
      ;;
    "--ans-x-without-pass")
      ANS_X_PASS_ENABLED="0"
      ;;
   esac
   shift
done

ANS_X_ENV_LABEL="Ansible eXpress Env (Ans-x Env)"
ANS_X_ENV_LABEL2="The Ansible Express Env"
if [ "$IS_SYNOPSIS" == "1" ]; then
  echo "## $ANS_X_ENV_LABEL"
  echo "$ANS_X_ENV_LABEL2"
  echo ""
else
  # Ansible
  echo "# $ANS_X_ENV_LABEL"
  echo "# $ANS_X_ENV_LABEL2"
  echo ""
fi

# ANS_X_PROJECT_DIR
ANS_X_PROJECT_DIR=${ANS_X_PROJECT_DIR:-$PWD}
if [ ! -d "$ANS_X_PROJECT_DIR" ]; then
    echo_err "The local ansible project home directory ($ANS_X_PROJECT_DIR) of the ANS_X_PROJECT_DIR variable does not exist. Are you sure that your ansible project is located there?"
    exit 1;
fi
if [[ $(uname -a) =~ "CYGWIN" ]]; then
    # Cygwin to Docker Pwd format (ie --volume /c/current/workdir/from/host:/ansible/playbooks)
    # Note: Deleting the c part seems to work also (ie HOMEPATH=\Users\ngera)
    ANS_X_PROJECT_DIR=$(cygpath -aw "$ANS_X_PROJECT_DIR" | tr 'C:' '/c' | tr '\\' '/')
fi

printEnv "ANS_X_PROJECT_DIR" \
   "The local ansible project directory to mount in docker" \
   "Mount the directory if set" \
   "../ans-x-project-directory.md" \
   "$ANS_X_PROJECT_DIR"

##################################
# Pass
##################################

# ANS_X_VAULT_ID_PASS
ANS_X_VAULT_ID_PASS=${ANS_X_VAULT_ID_PASS:-}
printEnv 'ANS_X_VAULT_ID_PASS' \
  "The location of a vault id in the pass secret manager" \
  "This variable will set ANSIBLE_VAULT_PASSWORD_FILE" \
  "ansible-vault.md" \
  "$ANS_X_VAULT_ID_PASS"

# ANS_X_SSH_KEY_PASS
ANS_X_SSH_KEY_PASS=${ANS_X_SSH_KEY_PASS:-}
printEnv "ANS_X_SSH_KEY_PASS" \
  "The location of a ssh key in the pass secret manager" \
  "This variable will set ANSIBLE_PRIVATE_KEY_FILE" \
  "../ans-x-ssh.md" \
  "$ANS_X_SSH_KEY_PASS"

# ANS_X_CONNECTION_PASSWORD_PASS
ANS_X_CONNECTION_PASSWORD_PASS=${ANS_X_CONNECTION_PASSWORD_PASS:-}
printEnv "ANS_X_CONNECTION_PASSWORD_PASS" \
  "The SSH user password in pass" \
  "This variable will set ANSIBLE_CONNECTION_PASSWORD_FILE" \
  "../ans-x-ssh.md" \
  "$ANS_X_CONNECTION_PASSWORD_PASS"

# ANS_X_BECOME_PASSWORD_PASS
ANS_X_BECOME_PASSWORD_PASS=${ANS_X_BECOME_PASSWORD_PASS:-}
printEnv 'ANS_X_BECOME_PASSWORD_PASS' \
  "The become password in pass" \
  "This variable will set ANSIBLE_BECOME_PASSWORD_FILE" \
  "../ans-x-ssh.md" \
  "$ANS_X_BECOME_PASSWORD_PASS"

# ANS_X_PASS_ENABLED
# With molecule we don't need to have secret as we connect locally
printEnv "ANS_X_PASS_ENABLED" \
  "Enable or disable the pass secret" \
  "1 (default, enabled), 0 (disabled)" \
  "../ans-x-pass.md" \
  "$ANS_X_PASS_ENABLED"

##################################
# Docker
##################################
# ANS_X_DOCKER_NAMESPACE
ANS_X_DOCKER_NAMESPACE=${ANS_X_DOCKER_NAMESPACE:-gerardnico}
printEnv "ANS_X_DOCKER_NAMESPACE" \
  "The docker image namespace" \
  "Set the namespace of the docker image used" \
  "../ans-x-docker.md" \
  "$ANS_X_DOCKER_NAMESPACE"

# ANS_X_DOCKER_NAME
ANS_X_DOCKER_NAME=${ANS_X_DOCKER_NAME:-ansible}
printEnv "ANS_X_DOCKER_NAME" \
  "The docker image name" \
  "Set the name of the docker image used" \
  "../ans-x-docker.md" \
  "$ANS_X_DOCKER_NAME"

# ANS_X_DOCKER_TAG
ANS_X_DOCKER_TAG=${ANS_X_DOCKER_TAG:-9.12.0}
printEnv "ANS_X_DOCKER_TAG" \
  "The docker image tag" \
  "Set the tag of the docker image used" \
  "../ans-x-docker.md" \
  "$ANS_X_DOCKER_TAG"

# ANS_X_DOCKER_REGISTRY
ANS_X_DOCKER_REGISTRY=${ANS_X_DOCKER_REGISTRY:-"ghcr.io"}
printEnv "ANS_X_DOCKER_REGISTRY" \
  "The docker image registry" \
  "Set the registry of the docker image used" \
  "../ans-x-docker.md" \
  "$ANS_X_DOCKER_REGISTRY"



# ANS_X_DOCKER_ENVS
ANS_X_DOCKER_ENVS="^(ANS_X|ANSIBLE|ACTION|AGNOSTIC|ANY|BECOME|CACHE|CALLBACKS|COLLECTIONS|COLOR|CONNECTION|COVERAGE|DEFAULT|DEPRECATION|DEVEL|DIFF|DOC|DUPLICATE|EDITOR|ENABLE|ERROR|FACTS_MODULES|GALAXY|HOST|INJECT|INTERPRETER|INVALID|INVENTORY|LOG|MAX_FILE_SIZE_FOR_DIFF|MODULE|HCLOUD|AZURE)"
printEnv 'ANS_X_DOCKER_ENVS' \
  "The docker envs grep pattern expression" \
  "Selects the environment variable to pass to Ansible" \
  "../ans-x-docker.md" \
  "$ANS_X_DOCKER_ENVS"

# ANS_X_DOCKER_TERMINAL
ANS_X_DOCKER_TERMINAL="${ANS_X_DOCKER_TERMINAL:-"1"}"
printEnv 'ANS_X_DOCKER_TERMINAL' \
  "Allocate a terminal to Docker and get colors" \
  "Colors are extra characters. You need to set this variable to 0 to retrieve raw data in a script" \
  "../ans-x-script.md" \
  "$ANS_X_DOCKER_TERMINAL"


# ANS_X_DOCKER_IMAGE_SHELL
ANS_X_DOCKER_IMAGE_SHELL="${ANS_X_DOCKER_IMAGE_SHELL:-"/usr/bin/env bash"}"
printEnv 'ANS_X_DOCKER_IMAGE_SHELL' \
  "The shell in the docker image" \
  "Used by the ans-x-shell script" \
  "ans-x-shell.md" \
  "$ANS_X_DOCKER_IMAGE_SHELL"

###################################
# Ansible Env
###################################
ANSIBLE_ENV_LABEL="Ansible Env"
ANSIBLE_ENV_LABEL2="The Ansible Env directory or file that are mounted into the Ansible Docker Execution Environment"
if [ "$IS_SYNOPSIS" == "1" ]; then
  echo "## $ANSIBLE_ENV_LABEL"
  echo "$ANSIBLE_ENV_LABEL2"
  echo ""
else
  # Ansible
  echo "# $ANSIBLE_ENV_LABEL"
  echo "# $ANSIBLE_ENV_LABEL2"
  echo ""
fi

# Ansible HOME
# We set it so that it's not empty and defined to the Ansible default because we mount it
ANSIBLE_HOME=${ANSIBLE_HOME:-"$HOME/.ansible"}
printEnv "ANSIBLE_HOME" \
  "Ansible Home" \
  "The directory where resources such as collections and roles are installed and searched by ansible)" \
  "https://docs.ansible.com/ansible/latest/reference_appendices/config.html#ansible-home" \
  "$ANSIBLE_HOME"

# Ansible Collections path
ANSIBLE_COLLECTIONS_PATH=${ANSIBLE_COLLECTIONS_PATH:-}
if [ "$ANSIBLE_COLLECTIONS_PATH" == "" ]; then
  # may be called ANSIBLE_COLLECTIONS_PATHS
  ANSIBLE_COLLECTIONS_PATH=${ANSIBLE_COLLECTIONS_PATHS:-}
fi
if [ "$ANSIBLE_COLLECTIONS_PATH" == "" ]; then
  # may be called COLLECTIONS_PATHS
  ANSIBLE_COLLECTIONS_PATH=${COLLECTIONS_PATHS:-}
fi
printEnv "ANSIBLE_COLLECTIONS_PATH" \
  "Ansible Collections Path" \
  "The base collections directory" \
  "https://docs.ansible.com/ansible/latest/reference_appendices/config.html#collections-paths" \
  "$ANSIBLE_COLLECTIONS_PATH"


ANSIBLE_CONFIG=${ANSIBLE_CONFIG:-}
if [ "$ANSIBLE_CONFIG" != "" ]; then
  # Mounted Path should be absolute
  ANSIBLE_CONFIG_REAL_PATH=$(realpath $ANSIBLE_CONFIG)
  if [ ! -f "$ANSIBLE_CONFIG_REAL_PATH" ]; then
    echo::warn "The ansible config file $ANSIBLE_CONFIG does not exist. Modify your ANSIBLE_CONFIG value of ($ANSIBLE_CONFIG)"
    ANSIBLE_CONFIG=""
  else
    ANSIBLE_CONFIG=$ANSIBLE_CONFIG_REAL_PATH
  fi
fi
printEnv "ANSIBLE_CONFIG" \
  "Ansible Config" \
  "The path to the ansible.cfg config file" \
  "https://docs.ansible.com/ansible/latest/reference_appendices/config.html#ansible-config" \
  "${ANSIBLE_CONFIG}"

# Prevent: ERROR: [Errno 21] Is a directory: b'/home/admin/code/ansible/ansible.cfg'
if [ -d "$PWD/ansible.cfg" ]; then
    echo::err "$PWD/ansible.cfg is a directory, not a file."
    exit 1
fi

# ANSIBLE_CONNECTION_PATH
printEnv "ANSIBLE_CONNECTION_PATH" \
  " Ansible Connection Path" \
  "The path to connection script" \
  "https://docs.ansible.com/ansible/latest/reference_appendices/config.html#ansible-connection-path" \
  "${ANSIBLE_CONNECTION_PATH:-}"

# ANSIBLE_COW_PATH
printEnv "ANSIBLE_COW_PATH" \
  "Ansible cowsay path" \
  "The custom cowsay path" \
  "https://docs.ansible.com/ansible/latest/reference_appendices/config.html#ansible-cow-path" \
  "${ANSIBLE_COW_PATH:-}"


